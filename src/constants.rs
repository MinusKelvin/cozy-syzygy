use cozy_chess::Square::{self, *};

#[rustfmt::skip]
pub const OFF_DIAGONAL: &[i8; 64] = &[
    0, -1, -1, -1, -1, -1, -1, -1,
    1,  0, -1, -1, -1, -1, -1, -1,
    1,  1,  0, -1, -1, -1, -1, -1,
    1,  1,  1,  0, -1, -1, -1, -1,
    1,  1,  1,  1,  0, -1, -1, -1,
    1,  1,  1,  1,  1,  0, -1, -1,
    1,  1,  1,  1,  1,  1,  0, -1,
    1,  1,  1,  1,  1,  1,  1,  0,
];

#[rustfmt::skip]
pub const FLIP_DIAGONAL: &[Square; 64] = &[
    A1, A2, A3, A4, A5, A6, A7, A8,
    B1, B2, B3, B4, B5, B6, B7, B8,
    C1, C2, C3, C4, C5, C6, C7, C8,
    D1, D2, D3, D4, D5, D6, D7, D8,
    E1, E2, E3, E4, E5, E6, E7, E8,
    F1, F2, F3, F4, F5, F6, F7, F8,
    G1, G2, G3, G4, G5, G6, G7, G8,
    H1, H2, H3, H4, H5, H6, H7, H8,
];

#[rustfmt::skip]
pub const LOWER: &[u8; 64] = &[
    28, 00, 01, 02, 03, 04, 05, 06,
    00, 29, 07, 08, 09, 10, 11, 12,
    01, 07, 30, 13, 14, 15, 16, 17,
    02, 08, 13, 31, 18, 19, 20, 21,
    03, 09, 14, 18, 32, 22, 23, 24,
    04, 10, 15, 19, 22, 33, 25, 26,
    05, 11, 16, 20, 23, 25, 34, 27,
    06, 12, 17, 21, 24, 26, 27, 35,
];

#[rustfmt::skip]
pub const TRIANGLE: &[u8; 64] = &[
    6, 0, 1, 2, 2, 1, 0, 6,
    0, 7, 3, 4, 4, 3, 7, 0,
    1, 3, 8, 5, 5, 8, 3, 1,
    2, 4, 5, 9, 9, 5, 4, 2,
    2, 4, 5, 9, 9, 5, 4, 2,
    1, 3, 8, 5, 5, 8, 3, 1,
    0, 7, 3, 4, 4, 3, 7, 0,
    6, 0, 1, 2, 2, 1, 0, 6,
];

// pub const INVERSE_TRIANGLE: &[u8; 10] = &[1, 2, 3, 10, 11, 19, 0, 9, 18, 27];

#[rustfmt::skip]
pub const DIAGONAL: &[u8; 64] = &[
    00, 00, 00, 00, 00, 00, 00, 08,
    00, 01, 00, 00, 00, 00, 09, 00,
    00, 00, 02, 00, 00, 10, 00, 00,
    00, 00, 00, 03, 11, 00, 00, 00,
    00, 00, 00, 12, 04, 00, 00, 00,
    00, 00, 13, 00, 00, 05, 00, 00,
    00, 14, 00, 00, 00, 00, 06, 00,
    15, 00, 00, 00, 00, 00, 00, 07,
];

// pub const INVERSE_DIAGONAL: &[u8; 16] =
//     &[0, 9, 18, 27, 36, 45, 54, 63, 7, 14, 21, 28, 35, 42, 49, 56];

#[rustfmt::skip]
pub const FLAP: &[u8; 64] = &[
    00, 00, 00, 00, 00, 00, 00, 00,
    00, 06, 12, 18, 18, 12, 06, 00,
    01, 07, 13, 19, 19, 13, 07, 01,
    02, 08, 14, 20, 20, 14, 08, 02,
    03, 09, 15, 21, 21, 15, 09, 03,
    04, 10, 16, 22, 22, 16, 10, 04,
    05, 11, 17, 23, 23, 17, 11, 05,
    00, 00, 00, 00, 00, 00, 00, 00,
];

pub const INVERSE_FLAP: &[u8; 24] = &[
    8, 16, 24, 32, 40, 48, 9, 17, 25, 33, 41, 49, 10, 18, 26, 34, 42, 50, 11, 19, 27, 35, 43, 51,
];

#[rustfmt::skip]
pub const PAWN_TWIST: &[u8; 64] = &[
    00, 00, 00, 00, 00, 00, 00, 00,
    47, 35, 23, 11, 10, 22, 34, 46,
    45, 33, 21, 09, 08, 20, 32, 44,
    43, 31, 19, 07, 06, 18, 30, 42,
    41, 29, 17, 05, 04, 16, 28, 40,
    39, 27, 15, 03, 02, 14, 26, 38,
    37, 25, 13, 01, 00, 12, 24, 36,
    00, 00, 00, 00, 00, 00, 00, 00,
];

// pub const INVERSE_PAWN_TWIST: &[u8; 48] = &[
//     52, 51, 44, 43, 36, 35, 28, 27, 20, 19, 12, 11, 53, 50, 45, 42, 37, 34, 29, 26, 21, 18, 13, 10,
//     54, 49, 46, 41, 38, 33, 30, 25, 22, 17, 14, 9, 55, 48, 47, 40, 39, 32, 31, 24, 23, 16, 15, 8,
// ];

pub const FILE_TO_FILE: &[u8] = &[0, 1, 2, 3, 3, 2, 1, 0];

#[rustfmt::skip]
pub const KK_INDEX: &[[i16; 64]; 10] = &[
    [
        -1, -1, -1, 00, 01, 02, 03, 04,
        -1, -1, -1, 05, 06, 07, 08, 09,
        10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41,
        42, 43, 44, 45, 46, 47, 48, 49,
        50, 51, 52, 53, 54, 55, 56, 57,
    ],
    [
        058,  -1,  -1,  -1, 059, 060, 061, 062,
        063,  -1,  -1,  -1, 064, 065, 066, 067,
        068, 069, 070, 071, 072, 073, 074, 075,
        076, 077, 078, 079, 080, 081, 082, 083,
        084, 085, 086, 087, 088, 089, 090, 091,
        092, 093, 094, 095, 096, 097, 098, 099,
        100, 101, 102, 103, 104, 105, 106, 107,
        108, 109, 110, 111, 112, 113, 114, 115,
    ],
    [
        116, 117,  -1,  -1,  -1, 118, 119, 120,
        121, 122,  -1,  -1,  -1, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133,
        134, 135, 136, 137, 138, 139, 140, 141,
        142, 143, 144, 145, 146, 147, 148, 149,
        150, 151, 152, 153, 154, 155, 156, 157,
        158, 159, 160, 161, 162, 163, 164, 165,
        166, 167, 168, 169, 170, 171, 172, 173,
    ],
    [
        174,  -1,  -1,  -1, 175, 176, 177, 178,
        179,  -1,  -1,  -1, 180, 181, 182, 183,
        184,  -1,  -1,  -1, 185, 186, 187, 188,
        189, 190, 191, 192, 193, 194, 195, 196,
        197, 198, 199, 200, 201, 202, 203, 204,
        205, 206, 207, 208, 209, 210, 211, 212,
        213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228,
    ],
    [
        229, 230,  -1,  -1,  -1, 231, 232, 233,
        234, 235,  -1,  -1,  -1, 236, 237, 238,
        239, 240,  -1,  -1,  -1, 241, 242, 243,
        244, 245, 246, 247, 248, 249, 250, 251,
        252, 253, 254, 255, 256, 257, 258, 259,
        260, 261, 262, 263, 264, 265, 266, 267,
        268, 269, 270, 271, 272, 273, 274, 275,
        276, 277, 278, 279, 280, 281, 282, 283,
    ],
    [
        284, 285, 286, 287, 288, 289, 290, 291,
        292, 293,  -1,  -1,  -1, 294, 295, 296,
        297, 298,  -1,  -1,  -1, 299, 300, 301,
        302, 303,  -1,  -1,  -1, 304, 305, 306,
        307, 308, 309, 310, 311, 312, 313, 314,
        315, 316, 317, 318, 319, 320, 321, 322,
        323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338,
    ],
    [
        -1, -1, 339, 340, 341, 342, 343, 344,
        -1, -1, 345, 346, 347, 348, 349, 350,
        -1, -1, 441, 351, 352, 353, 354, 355,
        -1, -1,  -1, 442, 356, 357, 358, 359,
        -1, -1,  -1,  -1, 443, 360, 361, 362,
        -1, -1,  -1,  -1,  -1, 444, 363, 364,
        -1, -1,  -1,  -1,  -1,  -1, 445, 365,
        -1, -1,  -1,  -1,  -1,  -1,  -1, 446,
    ],
    [
        -1, -1, -1, 366, 367, 368, 369, 370,
        -1, -1, -1, 371, 372, 373, 374, 375,
        -1, -1, -1, 376, 377, 378, 379, 380,
        -1, -1, -1, 447, 381, 382, 383, 384,
        -1, -1, -1,  -1, 448, 385, 386, 387,
        -1, -1, -1,  -1,  -1, 449, 388, 389,
        -1, -1, -1,  -1,  -1,  -1, 450, 390,
        -1, -1, -1,  -1,  -1,  -1,  -1, 451,
    ],
    [
        452, 391, 392, 393, 394, 395, 396, 397,
         -1,  -1,  -1,  -1, 398, 399, 400, 401,
         -1,  -1,  -1,  -1, 402, 403, 404, 405,
         -1,  -1,  -1,  -1, 406, 407, 408, 409,
         -1,  -1,  -1,  -1, 453, 410, 411, 412,
         -1,  -1,  -1,  -1,  -1, 454, 413, 414,
         -1,  -1,  -1,  -1,  -1,  -1, 455, 415,
         -1,  -1,  -1,  -1,  -1,  -1,  -1, 456,
    ],
    [
        457, 416, 417, 418, 419, 420, 421, 422,
         -1, 458, 423, 424, 425, 426, 427, 428,
         -1,  -1,  -1,  -1,  -1, 429, 430, 431,
         -1,  -1,  -1,  -1,  -1, 432, 433, 434,
         -1,  -1,  -1,  -1,  -1, 435, 436, 437,
         -1,  -1,  -1,  -1,  -1, 459, 438, 439,
         -1,  -1,  -1,  -1,  -1,  -1, 460, 440,
         -1,  -1,  -1,  -1,  -1,  -1,  -1, 461,
    ],
];

pub const BINOMIAL: [[i32; 64]; 5] = {
    let mut result = [[0; 64]; 5];

    let mut i = 0;
    while i < 5 {
        let mut j = 0;
        while j < 64 {
            let mut f = j;
            let mut l = 1;

            let mut k = 1;
            while k <= i {
                f *= j - k;
                l *= k + 1;

                k += 1;
            }

            result[i as usize][j as usize] = f / l;

            j += 1;
        }

        i += 1;
    }

    result
};

const PIF: ([[i32; 24]; 5], [[i32; 4]; 5]) = {
    let mut index = [[0; 24]; 5];
    let mut factor = [[0; 4]; 5];

    let mut i = 0;
    while i < 5 {
        let mut s = 0;

        let mut j = 0;
        while j < 24 {
            index[i as usize][j as usize] = s;
            s += match i {
                0 => 1,
                _ => {
                    BINOMIAL[i as usize - 1][PAWN_TWIST[INVERSE_FLAP[j as usize] as usize] as usize]
                }
            };

            if j % 6 == 5 {
                factor[i as usize][j / 6] = s;
                s = 0;
            }

            j += 1;
        }

        i += 1;
    }

    (index, factor)
};

pub const PAWN_INDEX: [[i32; 24]; 5] = PIF.0;
pub const PAWN_FACTOR: [[i32; 4]; 5] = PIF.1;
